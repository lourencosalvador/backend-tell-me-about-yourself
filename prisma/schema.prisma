// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  class     String
  photoUrl  String?
  recommendation String? 
  streak    Int      @default(0)
  lastStreakDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  videos Video[]
  audios Audio[]
  skills Skill[]
  profile UserProfile?
}

model Video {
  id        String   @id @default(uuid())
  path      String
  userId    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  audio Audio?
  skills Skill[]
}

model Audio {
  id      String  @id @default(uuid())
  path    String
  userId  String?
  videoId String? @unique
    status String @default("PENDING")

  // Relações
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  video  Video? @relation(fields: [videoId], references: [id], onDelete: SetNull)

  transcription Transcription?
}

model Transcription {
  id        String   @id @default(uuid())
  audioId   String   @unique
  text      String
  createdAt DateTime @default(now())
  status    String   @default("PENDING")

  // Relação com Audio
  audio Audio @relation(fields: [audioId], references: [id], onDelete: Cascade)
}

model Skill {
  id            String   @id @default(uuid())
  skillName     String
  skillCategory String
  confidence    Float    // 0.0 a 1.0 para hard skills, 0.0 a 1.0 para soft skills
  mentions      Int      @default(1)
  context       String   // JSON com contexto, indicadores ou exemplos
  type          String   // 'HARD' ou 'SOFT'
  
  // Relações
  userId   String
  videoId  String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video    Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  // Índices para performance
  @@index([userId, type])
  @@index([skillName, type])
}

model UserProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  profileDescription String?  // "Desenvolvedor frontend com forte comunicação"
  careerSuggestions  String?  // JSON array ["Tech Lead", "Frontend Senior"]
  lastAnalyzedAt     DateTime
  
  // Relação
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
